{
  "openapi": "3.0.3",
  "info": {
    "title": "DeepL API Documentation",
    "description": "The DeepL API provides programmatic access to DeepL’s machine translation technology.",
    "termsOfService": "https://www.deepl.com/pro-license/",
    "contact": {
      "name": "DeepL - Contact us",
      "url": "https://www.deepl.com/contact-us"
    },
    "version": "2.11.0"
  },
  "externalDocs": {
    "description": "DeepL Pro - Plans and pricing",
    "url": "https://www.deepl.com/pro#developer?cta=header-prices/"
  },
  "servers": [
    {
      "url": "https://api.deepl.com/v2",
      "description": "DeepL API Pro"
    },
    {
      "url": "https://api-free.deepl.com/v2",
      "description": "DeepL API Free"
    }
  ],
  "tags": [
    {
      "name": "TranslateText",
      "description": "The text-translation API currently consists of a single endpoint, `translate`, which is described below.\n\nTo learn more about context in DeepL API translations, we recommend [this article](https://www.deepl.com/docs-api/general/working-with-context)."
    },
    {
      "name": "TranslateDocuments",
      "description": "The document translation API allows you to translate whole documents and supports the following file types and extensions:\n  * `docx` - Microsoft Word Document\n  * `pptx` - Microsoft PowerPoint Document\n  * `pdf` - Portable Document Format\n  * `htm / html` - HTML Document\n  * `txt` - Plain Text Document\n  * `xlf / xliff` - XLIFF Document, version 2.1\n\nPlease note that with every submitted document of type .pptx, .docx, or .pdf,\nyou are billed a minimum of 50,000 characters with the DeepL API plan,\nno matter how many characters are included in the document.\n\n\nTranslating a document usually involves three types of HTTP requests:\n  - [upload](https://www.deepl.com/docs-api/documents/translate-document) the document to be translated,\n  - periodically [check the status](https://www.deepl.com/docs-api/documents/get-document-status) of the document translation,\n  - once the status call reports `done`, [download](https://www.deepl.com/docs-api/documents/download-document) the translated document.\n\n\nTo learn more about context in DeepL API translations, we recommend [this article](https://www.deepl.com/docs-api/general/working-with-context)."
    },
    {
      "name": "ManageGlossaries",
      "description": "The *glossary* functions allow you to create, inspect, and delete glossaries.\nGlossaries created with the glossary function can be used in translate requests by specifying the\n`glossary_id` parameter.\nIf you encounter issues, please let us know at support@DeepL.com.\n\nThe DeepL API supports glossaries in any combination of two languages from the following list, enabling a total of\n55 possible glossary language pairs:\n\n- DE (German)\n- EN (English)\n- ES (Spanish)\n- FR (French)\n- IT (Italian)\n- JA (Japanese)\n- NL (Dutch)\n- PL (Polish)\n- PT (Portuguese)\n- RU (Russian)\n- ZH (Chinese)\n\nThe maximum size limit for a glossary is 10 MiB = 10485760 bytes and each source/target text,\nas well as the name of the glossary, is limited to 1024 UTF-8 bytes.\nA total of 1000 glossaries are allowed per account.\n\nWhen creating a glossary with target language `EN` or `PT`, it's not necessary to specify a variant (e.g. `EN-US`, `EN-GB`, `PT-PT` or `PT-BR`).\nGlossaries with target language `EN` can be used in translations with either English variant.\nSimilarly `PT` glossaries can be used in translations with either Portuguese variant.\n\n\nGlossaries created via the DeepL API are distinct from glossaries created via the DeepL website and DeepL apps.\nThis means API glossaries cannot be used on the website and vice versa.\n\n\n\nNote that glossaries are immutable: once created, the glossary entries for a given glossary ID cannot be modified.\n\nAs a workaround for effectively editable glossaries, we suggest to identify glossaries by name instead of ID in your application\nand then use the following procedure for modifications:\n- [download](https://www.deepl.com/docs-api/glossaries/get-glossary-entries) and store the current glossary's entries,\n- locally modify the glossary entries,\n- [delete](https://www.deepl.com/docs-api/glossaries/delete-glossary) the existing glossary,\n- [create a new glossary](https://www.deepl.com/docs-api/glossaries/create-glossary) with the same name."
    },
    {
      "name": "MetaInformation",
      "description": "Information about API usage and value ranges"
    }
  ],
  "paths": {
    "/translate": {
      "post": {
        "tags": [
          "TranslateText"
        ],
        "summary": "Request Translation",
        "operationId": "translateText",
        "description": "The translate function.\n\n\nThe total request body size must not exceed 128 KiB (128 · 1024 bytes). Please split up your text into multiple\ncalls if it exceeds this limit.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "text",
                  "target_lang"
                ],
                "properties": {
                  "text": {
                    "description": "Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified\nmultiple times and translations are returned in the same order as they are requested. Each of the\nparameter values may contain multiple sentences. Up to 50 texts can be sent for translation in one\nrequest.",
                    "type": "array",
                    "maxItems": 50,
                    "items": {
                      "type": "string",
                      "example": "Hello, World!"
                    }
                  },
                  "source_lang": {
                    "type": "string",
                    "description": "Language of the text to be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.",
                    "enum": [
                      "BG",
                      "CS",
                      "DA",
                      "DE",
                      "EL",
                      "EN",
                      "ES",
                      "ET",
                      "FI",
                      "FR",
                      "HU",
                      "ID",
                      "IT",
                      "JA",
                      "KO",
                      "LT",
                      "LV",
                      "NB",
                      "NL",
                      "PL",
                      "PT",
                      "RO",
                      "RU",
                      "SK",
                      "SL",
                      "SV",
                      "TR",
                      "UK",
                      "ZH"
                    ],
                    "example": "EN"
                  },
                  "target_lang": {
                    "type": "string",
                    "description": "The language into which the text should be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English (unspecified variant for backward compatibility; please select `EN-GB` or `EN-US` instead)\n * `EN-GB` - English (British)\n * `EN-US` - English (American)\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (unspecified variant for backward compatibility; please select `PT-BR` or `PT-PT` instead)\n * `PT-BR` - Portuguese (Brazilian)\n * `PT-PT` - Portuguese (all Portuguese varieties excluding Brazilian Portuguese)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese (simplified)",
                    "enum": [
                      "BG",
                      "CS",
                      "DA",
                      "DE",
                      "EL",
                      "EN-GB",
                      "EN-US",
                      "ES",
                      "ET",
                      "FI",
                      "FR",
                      "HU",
                      "ID",
                      "IT",
                      "JA",
                      "KO",
                      "LT",
                      "LV",
                      "NB",
                      "NL",
                      "PL",
                      "PT-BR",
                      "PT-PT",
                      "RO",
                      "RU",
                      "SK",
                      "SL",
                      "SV",
                      "TR",
                      "UK",
                      "ZH"
                    ],
                    "example": "DE"
                  },
                  "split_sentences": {
                    "description": "Sets whether the translation engine should first split the input into sentences. For text translations where \n`tag_handling` is not set to `html`, the default value is `1`, meaning the engine splits on punctuation and on newlines.\n\nFor text translations where `tag_handling=html`, the default value is `nonewlines`, meaning the engine splits on punctuation only, ignoring newlines.  \n\nThe use of `nonewlines` as the default value for text translations where `tag_handling=html` is new behavior that was implemented in November 2022, \nwhen HTML handling was moved out of beta. \n\nPossible values are: \n\n * `0` - no splitting at all, whole input is treated as one sentence\n * `1` (default when `tag_handling` is not set to `html`) - splits on punctuation and on newlines\n * `nonewlines` (default when `tag_handling=html`) - splits on punctuation only, ignoring newlines\n\nFor applications that send one sentence per text parameter, we recommend setting `split_sentences` to `0`, in order to prevent the engine from splitting the sentence unintentionally.\n\n\nPlease note that newlines will split sentences when `split_sentences=1`. We recommend cleaning files so they don't contain breaking sentences or setting the parameter `split_sentences` to `nonewlines`.",
                    "type": "string",
                    "enum": [
                      "0",
                      "1",
                      "nonewlines"
                    ],
                    "default": "1"
                  },
                  "preserve_formatting": {
                    "description": "Sets whether the translation engine should respect the original formatting, even if it would usually correct some aspects.\n\nThe formatting aspects affected by this setting include:\n * Punctuation at the beginning and end of the sentence\n * Upper/lower case at the beginning of the sentence",
                    "type": "boolean",
                    "default": false
                  },
                  "formality": {
                    "description": "Sets whether the translated text should lean towards formal or informal language.\nThis feature currently only works for target languages\n`DE` (German),\n`FR` (French),\n`IT` (Italian),\n`ES` (Spanish),\n`NL` (Dutch),\n`PL` (Polish),\n`PT-BR` and `PT-PT` (Portuguese),\n`JA` (Japanese),\nand `RU` (Russian).\nLearn more about the plain/polite feature for Japanese [here](https://support.deepl.com/hc/en-us/articles/6306700061852-About-the-plain-polite-feature-in-Japanese).\nSetting this parameter with a target language that does not support formality will fail,\nunless one of the `prefer_...` options are used.\nPossible options are:\n  * `default` (default)\n  * `more` - for a more formal language\n  * `less` - for a more informal language\n  * `prefer_more` - for a more formal language if available, otherwise fallback to default formality\n  * `prefer_less` - for a more informal language if available, otherwise fallback to default formality",
                    "type": "string",
                    "enum": [
                      "default",
                      "more",
                      "less",
                      "prefer_more",
                      "prefer_less"
                    ],
                    "default": "default"
                  },
                  "glossary_id": {
                    "allOf": [
                      {
                        "type": "string",
                        "description": "A unique ID assigned to a glossary.",
                        "example": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7"
                      },
                      {
                        "description": "Specify the glossary to use for the translation. **Important:** This requires the `source_lang`\nparameter to be set and the language pair of the glossary has to match the language pair of the\nrequest.",
                        "type": "string"
                      }
                    ]
                  },
                  "tag_handling": {
                    "description": "Sets which kind of tags should be handled. Options currently available:\n * `xml`: Enable XML tag handling; see [XML Handling](https://www.deepl.com/docs-api/xml).\n * `html`: Enable HTML tag handling; see [HTML Handling](https://www.deepl.com/docs-api/html).",
                    "type": "string",
                    "enum": [
                      "xml",
                      "html"
                    ]
                  },
                  "outline_detection": {
                    "description": "The automatic detection of the XML structure won't yield best results in all XML files. You can disable this automatic mechanism altogether by setting the `outline_detection` parameter to `false` and selecting the tags that should be considered structure tags. This will split sentences using the `splitting_tags` parameter.\n\n\nIn the example below, we achieve the same results as the automatic engine by disabling automatic detection with `outline_detection=0` and setting the parameters manually to `tag_handling=xml`, `split_sentences=nonewlines`,  and `splitting_tags=par,title`.\n * Example request:\n   ```\n   <document>\n     <meta>\n       <title>A document's title</title>\n     </meta>\n     <content>\n       <par>This is the first sentence. Followed by a second one.</par>\n       <par>This is the third sentence.</par>\n     </content>\n   </document>\n   ```\n * Example response:\n   ```\n   <document>\n     <meta>\n       <title>Der Titel eines Dokuments</title>\n     </meta>\n     <content>\n       <par>Das ist der erste Satz. Gefolgt von einem zweiten.</par>\n       <par>Dies ist der dritte Satz.</par>\n     </content>\n   </document>\n   ```\nWhile this approach is slightly more complicated, it allows for greater control over the structure of the translation output.",
                    "type": "boolean",
                    "default": true
                  },
                  "non_splitting_tags": {
                    "allOf": [
                      {
                        "description": "List of XML or HTML tags.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "a",
                          "p",
                          "span"
                        ]
                      }
                    ],
                    "description": "List of XML tags which never split sentences.\n\n\nFor some XML files, finding tags with textual content and splitting sentences using those tags won't yield the best results. The following example shows the engine splitting sentences on `par` tags and proceeding to translate the parts separately, resulting in an incorrect translation:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, es sei eine gute Idee gewesen.</par><par> Durchführung einer internen Untersuchung.</par>\n```\n\n\nAs this can lead to bad translations, this type of structure should either be avoided, or the `non_splitting_tags` parameter should be set. The following example shows the same call, with the parameter set to `par`:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, dass sie</par><par> eine interne Untersuchung durchgeführt</par><par> habe</par><par>.</par>\n```\n\n\nThis time, the sentence is translated as a whole. The XML tags are now considered markup and copied into the translated sentence. As the translation of the words \"had been\" has moved to another position in the German sentence, the two par tags are duplicated (which is expected here)."
                  },
                  "splitting_tags": {
                    "allOf": [
                      {
                        "description": "List of XML or HTML tags.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "a",
                          "p",
                          "span"
                        ]
                      }
                    ],
                    "description": "List of XML tags which always cause splits.\n\n\nSee the example in the `outline_detection` parameter's description."
                  },
                  "ignore_tags": {
                    "allOf": [
                      {
                        "description": "List of XML or HTML tags.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "example": [
                          "a",
                          "p",
                          "span"
                        ]
                      }
                    ],
                    "description": "List of XML tags that indicate text not to be translated.\n\n\nUse this parameter to ensure that elements in the original text are not altered in the translation (e.g., trademarks, product names) and insert tags into your original text. In the following example, the `ignore_tags` parameter is set to `keep`:\n * Example request:\n   ```\n   Please open the page <keep>Settings</keep> to configure your system.\n   ```\n * Example response:\n   ```\n   Bitte öffnen Sie die Seite <keep>Settings</keep> um Ihr System zu konfigurieren.\n   ```"
                  }
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "examples": {
                "Basic": {
                  "summary": "Basic Example",
                  "value": {
                    "text": [
                      "Hello, world!"
                    ],
                    "target_lang": "DE"
                  }
                },
                "Glossary": {
                  "summary": "Using a Glossary",
                  "value": {
                    "text": [
                      "Hello, world!"
                    ],
                    "target_lang": "DE",
                    "source_lang": "EN",
                    "glossary_id": "[yourGlossaryId]"
                  }
                },
                "MultipleSentences": {
                  "summary": "Multiple Sentences",
                  "value": {
                    "text": [
                      "The table is green. The chair is black."
                    ],
                    "target_lang": "DE"
                  }
                },
                "LargeVolumes": {
                  "summary": "Large Volumes of Text",
                  "value": {
                    "text": [
                      "This is the first sentence.",
                      "This is the second sentence.",
                      "This is the third sentence."
                    ],
                    "target_lang": "DE"
                  }
                }
              },
              "schema": {
                "type": "object",
                "required": [
                  "text",
                  "target_lang"
                ],
                "properties": {
                  "text": {
                    "description": "Text to be translated. Only UTF-8-encoded plain text is supported. The parameter may be specified multiple times and translations are returned in the same order as they are requested. Each of the parameter values may contain multiple sentences.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "source_lang": {
                    "type": "string",
                    "description": "Language of the text to be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.",
                    "enum": [
                      "BG",
                      "CS",
                      "DA",
                      "DE",
                      "EL",
                      "EN",
                      "ES",
                      "ET",
                      "FI",
                      "FR",
                      "HU",
                      "ID",
                      "IT",
                      "JA",
                      "KO",
                      "LT",
                      "LV",
                      "NB",
                      "NL",
                      "PL",
                      "PT",
                      "RO",
                      "RU",
                      "SK",
                      "SL",
                      "SV",
                      "TR",
                      "UK",
                      "ZH"
                    ],
                    "example": "EN"
                  },
                  "target_lang": {
                    "type": "string",
                    "description": "The language into which the text should be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English (unspecified variant for backward compatibility; please select `EN-GB` or `EN-US` instead)\n * `EN-GB` - English (British)\n * `EN-US` - English (American)\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (unspecified variant for backward compatibility; please select `PT-BR` or `PT-PT` instead)\n * `PT-BR` - Portuguese (Brazilian)\n * `PT-PT` - Portuguese (all Portuguese varieties excluding Brazilian Portuguese)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese (simplified)",
                    "enum": [
                      "BG",
                      "CS",
                      "DA",
                      "DE",
                      "EL",
                      "EN-GB",
                      "EN-US",
                      "ES",
                      "ET",
                      "FI",
                      "FR",
                      "HU",
                      "ID",
                      "IT",
                      "JA",
                      "KO",
                      "LT",
                      "LV",
                      "NB",
                      "NL",
                      "PL",
                      "PT-BR",
                      "PT-PT",
                      "RO",
                      "RU",
                      "SK",
                      "SL",
                      "SV",
                      "TR",
                      "UK",
                      "ZH"
                    ],
                    "example": "DE"
                  },
                  "split_sentences": {
                    "description": "Sets whether the translation engine should first split the input into sentences. For text translations where \n`tag_handling` is not set to `html`, the default value is `1`, meaning the engine splits on punctuation and on newlines.\n\nFor text translations where `tag_handling=html`, the default value is `nonewlines`, meaning the engine splits on punctuation only, ignoring newlines.  \n\nThe use of `nonewlines` as the default value for text translations where `tag_handling=html` is new behavior that was implemented in November 2022, \nwhen HTML handling was moved out of beta. \n\nPossible values are: \n\n * `0` - no splitting at all, whole input is treated as one sentence\n * `1` (default when `tag_handling` is not set to `html`) - splits on punctuation and on newlines\n * `nonewlines` (default when `tag_handling=html`) - splits on punctuation only, ignoring newlines\n\nFor applications that send one sentence per text parameter, we recommend setting `split_sentences` to `0`, in order to prevent the engine from splitting the sentence unintentionally.\n\n\nPlease note that newlines will split sentences when `split_sentences=1`. We recommend cleaning files so they don't contain breaking sentences or setting the parameter `split_sentences` to `nonewlines`.",
                    "type": "string",
                    "enum": [
                      "0",
                      "1",
                      "nonewlines"
                    ],
                    "default": "1"
                  },
                  "preserve_formatting": {
                    "description": "Sets whether the translation engine should respect the original formatting, even if it would usually correct some aspects. Possible values are:\n * `0` (default)\n * `1`\n\nThe formatting aspects affected by this setting include:\n * Punctuation at the beginning and end of the sentence\n * Upper/lower case at the beginning of the sentence",
                    "type": "string",
                    "enum": [
                      "0",
                      "1"
                    ],
                    "default": "0"
                  },
                  "formality": {
                    "description": "Sets whether the translated text should lean towards formal or informal language.\nThis feature currently only works for target languages\n`DE` (German),\n`FR` (French),\n`IT` (Italian),\n`ES` (Spanish),\n`NL` (Dutch),\n`PL` (Polish),\n`PT-BR` and `PT-PT` (Portuguese),\n`JA` (Japanese),\nand `RU` (Russian).\nLearn more about the plain/polite feature for Japanese [here](https://support.deepl.com/hc/en-us/articles/6306700061852-About-the-plain-polite-feature-in-Japanese).\nSetting this parameter with a target language that does not support formality will fail,\nunless one of the `prefer_...` options are used.\nPossible options are:\n  * `default` (default)\n  * `more` - for a more formal language\n  * `less` - for a more informal language\n  * `prefer_more` - for a more formal language if available, otherwise fallback to default formality\n  * `prefer_less` - for a more informal language if available, otherwise fallback to default formality",
                    "type": "string",
                    "enum": [
                      "default",
                      "more",
                      "less",
                      "prefer_more",
                      "prefer_less"
                    ],
                    "default": "default"
                  },
                  "glossary_id": {
                    "allOf": [
                      {
                        "type": "string",
                        "description": "A unique ID assigned to a glossary.",
                        "example": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7"
                      }
                    ],
                    "description": "Specify the glossary to use for the translation. **Important:** This requires the `source_lang` parameter to be set and the language pair of the glossary has to match the language pair of the request."
                  },
                  "tag_handling": {
                    "description": "Sets which kind of tags should be handled. Options currently available:\n * `xml`: Enable XML tag handling; see [XML Handling](https://www.deepl.com/docs-api/xml).\n * `html`: Enable HTML tag handling; see [HTML Handling](https://www.deepl.com/docs-api/html).",
                    "type": "string",
                    "enum": [
                      "xml",
                      "html"
                    ]
                  },
                  "outline_detection": {
                    "description": "The automatic detection of the XML structure won't yield best results in all XML files. You can disable this automatic mechanism altogether by setting the `outline_detection` parameter to `0` and selecting the tags that should be considered structure tags. This will split sentences using the `splitting_tags` parameter.\n\n\nIn the example below, we achieve the same results as the automatic engine by disabling automatic detection with `outline_detection=0` and setting the parameters manually to `tag_handling=xml`, `split_sentences=nonewlines`,  and `splitting_tags=par,title`.\n * Example request:\n   ```\n   <document>\n     <meta>\n       <title>A document's title</title>\n     </meta>\n     <content>\n       <par>This is the first sentence. Followed by a second one.</par>\n       <par>This is the third sentence.</par>\n     </content>\n   </document>\n   ```\n * Example response:\n   ```\n   <document>\n     <meta>\n       <title>Der Titel eines Dokuments</title>\n     </meta>\n     <content>\n       <par>Das ist der erste Satz. Gefolgt von einem zweiten.</par>\n       <par>Dies ist der dritte Satz.</par>\n     </content>\n   </document>\n   ```\nWhile this approach is slightly more complicated, it allows for greater control over the structure of the translation output.",
                    "type": "string",
                    "enum": [
                      "0"
                    ]
                  },
                  "non_splitting_tags": {
                    "allOf": [
                      {
                        "description": "Comma-separated list of XML or HTML tags.",
                        "type": "string",
                        "example": "a,p,span"
                      }
                    ],
                    "description": "Comma-separated list of XML tags which never split sentences.\n\n\nFor some XML files, finding tags with textual content and splitting sentences using those tags won't yield the best results. The following example shows the engine splitting sentences on `par` tags and proceeding to translate the parts separately, resulting in an incorrect translation:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, es sei eine gute Idee gewesen.</par><par> Durchführung einer internen Untersuchung.</par>\n```\n\n\nAs this can lead to bad translations, this type of structure should either be avoided, or the `non_splitting_tags` parameter should be set. The following example shows the same call, with the parameter set to `par`:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, dass sie</par><par> eine interne Untersuchung durchgeführt</par><par> habe</par><par>.</par>\n```\n\n\nThis time, the sentence is translated as a whole. The XML tags are now considered markup and copied into the translated sentence. As the translation of the words \"had been\" has moved to another position in the German sentence, the two par tags are duplicated (which is expected here)."
                  },
                  "splitting_tags": {
                    "allOf": [
                      {
                        "description": "Comma-separated list of XML or HTML tags.",
                        "type": "string",
                        "example": "a,p,span"
                      }
                    ],
                    "description": "Comma-separated list of XML tags which always cause splits.\n\n\nSee the example in the `outline_detection` parameter's description."
                  },
                  "ignore_tags": {
                    "allOf": [
                      {
                        "description": "Comma-separated list of XML or HTML tags.",
                        "type": "string",
                        "example": "a,p,span"
                      }
                    ],
                    "description": "Comma-separated list of XML tags that indicate text not to be translated.\n\n\nUse this parameter to ensure that elements in the original text are not altered in the translation (e.g., trademarks, product names) and insert tags into your original text. In the following example, the `ignore_tags` parameter is set to `keep`:\n * Example request:\n   ```\n   Please open the page <keep>Settings</keep> to configure your system.\n   ```\n * Example response:\n   ```\n   Bitte öffnen Sie die Seite <keep>Settings</keep> um Ihr System zu konfigurieren.\n   ```"
                  }
                }
              },
              "encoding": {
                "text": {
                  "style": "form",
                  "explode": true,
                  "contentType": "application/json"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The translate function returns a JSON representation of the translations in the order the text parameters have been specified.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "translations": {
                      "type": "array",
                      "minItems": 1,
                      "items": {
                        "type": "object",
                        "properties": {
                          "detected_source_language": {
                            "allOf": [
                              {
                                "type": "string",
                                "description": "Language of the text to be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.",
                                "enum": [
                                  "BG",
                                  "CS",
                                  "DA",
                                  "DE",
                                  "EL",
                                  "EN",
                                  "ES",
                                  "ET",
                                  "FI",
                                  "FR",
                                  "HU",
                                  "ID",
                                  "IT",
                                  "JA",
                                  "KO",
                                  "LT",
                                  "LV",
                                  "NB",
                                  "NL",
                                  "PL",
                                  "PT",
                                  "RO",
                                  "RU",
                                  "SK",
                                  "SL",
                                  "SV",
                                  "TR",
                                  "UK",
                                  "ZH"
                                ],
                                "example": "EN"
                              }
                            ],
                            "description": "The language detected in the source text. It reflects the value of the `source_lang` parameter, when specified."
                          },
                          "text": {
                            "description": "The translated text.",
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Basic": {
                    "value": {
                      "translations": [
                        {
                          "detected_source_language": "EN",
                          "text": "Hallo, Welt!"
                        }
                      ]
                    }
                  },
                  "Glossary": {
                    "value": {
                      "translations": [
                        {
                          "text": "Hallo, Welt!"
                        }
                      ]
                    }
                  },
                  "MultipleSentences": {
                    "value": {
                      "translations": [
                        {
                          "detected_source_language": "EN",
                          "text": "Der Tisch ist grün. Der Stuhl ist schwarz."
                        }
                      ]
                    }
                  },
                  "LargeVolumes": {
                    "value": {
                      "translations": [
                        {
                          "detected_source_language": "EN",
                          "text": "Das ist der erste Satz."
                        },
                        {
                          "detected_source_language": "EN",
                          "text": "Das ist der zweite Satz."
                        },
                        {
                          "detected_source_language": "EN",
                          "text": "Dies ist der dritte Satz."
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check error message and your parameters."
          },
          "403": {
            "description": "Authorization failed. Please supply a valid `DeepL-Auth-Key` via the `Authorization` header."
          },
          "404": {
            "description": "The requested resource could not be found."
          },
          "413": {
            "description": "The request size exceeds the limit."
          },
          "414": {
            "description": "The request URL is too long. You can avoid this error by using a POST request instead of a GET request, and sending the parameters in the HTTP body."
          },
          "429": {
            "description": "Too many requests. Please wait and resend your request."
          },
          "456": {
            "description": "Quota exceeded. The character limit has been reached."
          },
          "500": {
            "description": "Internal error."
          },
          "504": {
            "description": "Resource currently unavailable. Try again later."
          },
          "529": {
            "description": "Too many requests. Please wait and resend your request."
          }
        },
        "security": [
          {
            "auth_header": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "DocumentID": {
        "name": "document_id",
        "description": "The document ID that was sent to the client when the document was uploaded to the API.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "04DE5AD98A02647D83285A36021911C6"
      },
      "GlossaryID": {
        "name": "glossary_id",
        "description": "A unique ID assigned to the glossary.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SourceLanguage": {
        "name": "source_lang",
        "in": "query",
        "schema": {
          "type": "string",
          "description": "Language of the text to be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.",
          "enum": [
            "BG",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN",
            "ES",
            "ET",
            "FI",
            "FR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "LT",
            "LV",
            "NB",
            "NL",
            "PL",
            "PT",
            "RO",
            "RU",
            "SK",
            "SL",
            "SV",
            "TR",
            "UK",
            "ZH"
          ],
          "example": "EN"
        }
      },
      "TargetLanguage": {
        "name": "target_lang",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string",
          "description": "The language into which the text should be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English (unspecified variant for backward compatibility; please select `EN-GB` or `EN-US` instead)\n * `EN-GB` - English (British)\n * `EN-US` - English (American)\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (unspecified variant for backward compatibility; please select `PT-BR` or `PT-PT` instead)\n * `PT-BR` - Portuguese (Brazilian)\n * `PT-PT` - Portuguese (all Portuguese varieties excluding Brazilian Portuguese)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese (simplified)",
          "enum": [
            "BG",
            "CS",
            "DA",
            "DE",
            "EL",
            "EN-GB",
            "EN-US",
            "ES",
            "ET",
            "FI",
            "FR",
            "HU",
            "ID",
            "IT",
            "JA",
            "KO",
            "LT",
            "LV",
            "NB",
            "NL",
            "PL",
            "PT-BR",
            "PT-PT",
            "RO",
            "RU",
            "SK",
            "SL",
            "SV",
            "TR",
            "UK",
            "ZH"
          ],
          "example": "DE"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request. Please check error message and your parameters."
      },
      "BadRequestGlossaries": {
        "description": "Bad request. Please check error message and your parameters.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "description": "Generic description of the error.",
                  "type": "string"
                },
                "detail": {
                  "description": "More specific description of the error.",
                  "type": "string"
                }
              }
            },
            "example": {
              "message": "Invalid glossary entries provided",
              "detail": "Key with the index 1 (starting at position 13) duplicates key with the index 0 (starting at position 0)"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Authorization failed. Please supply a valid `DeepL-Auth-Key` via the `Authorization` header."
      },
      "Forbidden": {
        "description": "Authorization failed. Please supply a valid `DeepL-Auth-Key` via the `Authorization` header."
      },
      "ForbiddenGlossaries": {
        "description": "Forbidden. The access to the requested resource is denied, because of insufficient access rights."
      },
      "NotFound": {
        "description": "The requested resource could not be found."
      },
      "NotFound404DocTransDownload": {
        "description": "Trying to download a document using a non-existing document ID or the wrong document key will result in a 404 error. As stated above, documents can only be downloaded once before they are deleted from the server and their document ID is invalidated.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "detailed error message"
                }
              }
            },
            "examples": {
              "NotFound": {
                "summary": "Not Found",
                "value": {
                  "message": "Document not found"
                }
              }
            }
          }
        }
      },
      "PayloadTooLarge": {
        "description": "The request size exceeds the limit."
      },
      "URITooLong": {
        "description": "The request URL is too long. You can avoid this error by using a POST request instead of a GET request, and sending the parameters in the HTTP body."
      },
      "UnsupportedMediaTypeGlossaries": {
        "description": "The requested entries format specified in the `Accept` header is not supported."
      },
      "TooManyRequests": {
        "description": "Too many requests. Please wait and resend your request."
      },
      "QuotaExceeded": {
        "description": "Quota exceeded. The character limit has been reached."
      },
      "InternalServerError": {
        "description": "Internal error."
      },
      "ServiceUnavailable": {
        "description": "Resource currently unavailable. Try again later."
      },
      "ServiceUnavailable503DocTransDownload": {
        "description": "A 503 result will be returned if the user tries to download a translated document that is currently being processed and is not yet ready for download.\nPlease make sure to check that the document status is 'done' before trying to send a download request.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "detailed error message"
                }
              }
            },
            "examples": {
              "AlreadyDownloaded": {
                "summary": "Already Downloaded",
                "value": {
                  "message": "Document already downloaded"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "auth_header": {
        "type": "apiKey",
        "description": "Authentication with `Authorization` header and `DeepL-Auth-Key` authentication scheme",
        "name": "Authorization",
        "in": "header"
      }
    },
    "schemas": {
      "CreateGlossaryParameters": {
        "type": "object",
        "required": [
          "name",
          "source_lang",
          "target_lang",
          "entries",
          "entries_format"
        ],
        "properties": {
          "name": {
            "description": "Name to be associated with the glossary.",
            "type": "string",
            "example": "My Glossary"
          },
          "source_lang": {
            "type": "string",
            "description": "The language in which the source texts in the glossary are specified.",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "ja",
              "nl",
              "pl",
              "pt",
              "ru",
              "zh"
            ],
            "example": "en"
          },
          "target_lang": {
            "type": "string",
            "description": "The language in which the target texts in the glossary are specified.",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "ja",
              "nl",
              "pl",
              "pt",
              "ru",
              "zh"
            ],
            "example": "de"
          },
          "entries": {
            "description": "The entries of the glossary. The entries have to be specified in the format provided by the `entries_format` parameter.",
            "type": "string",
            "example": "Hello\tGuten Tag"
          },
          "entries_format": {
            "description": "The format in which the glossary entries are provided. Formats currently available:\n- `tsv` (default) - tab-separated values\n- `csv` - comma-separated values\n\nSee [Supported Glossary Formats](https://www.deepl.com/docs-api/glossaries/formats) for details about each format.",
            "type": "string",
            "enum": [
              "tsv",
              "csv"
            ],
            "example": "tsv",
            "default": "tsv"
          }
        }
      },
      "DocumentTranslationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "detailed error message"
          }
        }
      },
      "DocumentKey": {
        "type": "object",
        "required": [
          "document_key"
        ],
        "properties": {
          "document_key": {
            "description": "The document encryption key that was sent to the client when the document was uploaded to the API.",
            "type": "string",
            "example": "0CB0054F1C132C1625B392EADDA41CB754A742822F6877173029A6C487E7F60A"
          }
        }
      },
      "Formality": {
        "description": "Sets whether the translated text should lean towards formal or informal language.\nThis feature currently only works for target languages\n`DE` (German),\n`FR` (French),\n`IT` (Italian),\n`ES` (Spanish),\n`NL` (Dutch),\n`PL` (Polish),\n`PT-BR` and `PT-PT` (Portuguese),\n`JA` (Japanese),\nand `RU` (Russian).\nLearn more about the plain/polite feature for Japanese [here](https://support.deepl.com/hc/en-us/articles/6306700061852-About-the-plain-polite-feature-in-Japanese).\nSetting this parameter with a target language that does not support formality will fail,\nunless one of the `prefer_...` options are used.\nPossible options are:\n  * `default` (default)\n  * `more` - for a more formal language\n  * `less` - for a more informal language\n  * `prefer_more` - for a more formal language if available, otherwise fallback to default formality\n  * `prefer_less` - for a more informal language if available, otherwise fallback to default formality",
        "type": "string",
        "enum": [
          "default",
          "more",
          "less",
          "prefer_more",
          "prefer_less"
        ],
        "default": "default"
      },
      "GlossaryId": {
        "type": "string",
        "description": "A unique ID assigned to a glossary.",
        "example": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7"
      },
      "Glossary": {
        "type": "object",
        "properties": {
          "glossary_id": {
            "type": "string",
            "description": "A unique ID assigned to a glossary.",
            "example": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7"
          },
          "name": {
            "description": "Name associated with the glossary.",
            "type": "string"
          },
          "ready": {
            "description": "Indicates if the newly created glossary can already be used in `translate` requests.\nIf the created glossary is not yet ready, you have to wait and check the `ready` status\nof the glossary before using it in a `translate` request.",
            "type": "boolean"
          },
          "source_lang": {
            "type": "string",
            "description": "The language in which the source texts in the glossary are specified.",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "ja",
              "nl",
              "pl",
              "pt",
              "ru",
              "zh"
            ],
            "example": "en"
          },
          "target_lang": {
            "type": "string",
            "description": "The language in which the target texts in the glossary are specified.",
            "enum": [
              "de",
              "en",
              "es",
              "fr",
              "it",
              "ja",
              "nl",
              "pl",
              "pt",
              "ru",
              "zh"
            ],
            "example": "de"
          },
          "creation_time": {
            "description": "The creation time of the glossary in the ISO 8601-1:2019 format (e.g.: `2021-08-03T14:16:18.329Z`).",
            "type": "string",
            "format": "date-time"
          },
          "entry_count": {
            "description": "The number of entries in the glossary.",
            "type": "integer"
          }
        },
        "example": {
          "glossary_id": "def3a26b-3e84-45b3-84ae-0c0aaf3525f7",
          "ready": true,
          "name": "My Glossary",
          "source_lang": "en",
          "target_lang": "de",
          "creation_time": "2021-08-03T14:16:18.329Z",
          "entry_count": 1
        }
      },
      "GlossarySourceLanguage": {
        "type": "string",
        "description": "The language in which the source texts in the glossary are specified.",
        "enum": [
          "de",
          "en",
          "es",
          "fr",
          "it",
          "ja",
          "nl",
          "pl",
          "pt",
          "ru",
          "zh"
        ],
        "example": "en"
      },
      "GlossaryTargetLanguage": {
        "type": "string",
        "description": "The language in which the target texts in the glossary are specified.",
        "enum": [
          "de",
          "en",
          "es",
          "fr",
          "it",
          "ja",
          "nl",
          "pl",
          "pt",
          "ru",
          "zh"
        ],
        "example": "de"
      },
      "OutlineDetectionOption": {
        "description": "The automatic detection of the XML structure won't yield best results in all XML files. You can disable this automatic mechanism altogether by setting the `outline_detection` parameter to `false` and selecting the tags that should be considered structure tags. This will split sentences using the `splitting_tags` parameter.\n\n\nIn the example below, we achieve the same results as the automatic engine by disabling automatic detection with `outline_detection=0` and setting the parameters manually to `tag_handling=xml`, `split_sentences=nonewlines`,  and `splitting_tags=par,title`.\n * Example request:\n   ```\n   <document>\n     <meta>\n       <title>A document's title</title>\n     </meta>\n     <content>\n       <par>This is the first sentence. Followed by a second one.</par>\n       <par>This is the third sentence.</par>\n     </content>\n   </document>\n   ```\n * Example response:\n   ```\n   <document>\n     <meta>\n       <title>Der Titel eines Dokuments</title>\n     </meta>\n     <content>\n       <par>Das ist der erste Satz. Gefolgt von einem zweiten.</par>\n       <par>Dies ist der dritte Satz.</par>\n     </content>\n   </document>\n   ```\nWhile this approach is slightly more complicated, it allows for greater control over the structure of the translation output.",
        "type": "boolean",
        "default": true
      },
      "OutlineDetectionOptionStr": {
        "description": "The automatic detection of the XML structure won't yield best results in all XML files. You can disable this automatic mechanism altogether by setting the `outline_detection` parameter to `0` and selecting the tags that should be considered structure tags. This will split sentences using the `splitting_tags` parameter.\n\n\nIn the example below, we achieve the same results as the automatic engine by disabling automatic detection with `outline_detection=0` and setting the parameters manually to `tag_handling=xml`, `split_sentences=nonewlines`,  and `splitting_tags=par,title`.\n * Example request:\n   ```\n   <document>\n     <meta>\n       <title>A document's title</title>\n     </meta>\n     <content>\n       <par>This is the first sentence. Followed by a second one.</par>\n       <par>This is the third sentence.</par>\n     </content>\n   </document>\n   ```\n * Example response:\n   ```\n   <document>\n     <meta>\n       <title>Der Titel eines Dokuments</title>\n     </meta>\n     <content>\n       <par>Das ist der erste Satz. Gefolgt von einem zweiten.</par>\n       <par>Dies ist der dritte Satz.</par>\n     </content>\n   </document>\n   ```\nWhile this approach is slightly more complicated, it allows for greater control over the structure of the translation output.",
        "type": "string",
        "enum": [
          "0"
        ]
      },
      "PreserveFormattingOption": {
        "description": "Sets whether the translation engine should respect the original formatting, even if it would usually correct some aspects.\n\nThe formatting aspects affected by this setting include:\n * Punctuation at the beginning and end of the sentence\n * Upper/lower case at the beginning of the sentence",
        "type": "boolean",
        "default": false
      },
      "PreserveFormattingOptionStr": {
        "description": "Sets whether the translation engine should respect the original formatting, even if it would usually correct some aspects. Possible values are:\n * `0` (default)\n * `1`\n\nThe formatting aspects affected by this setting include:\n * Punctuation at the beginning and end of the sentence\n * Upper/lower case at the beginning of the sentence",
        "type": "string",
        "enum": [
          "0",
          "1"
        ],
        "default": "0"
      },
      "SplitSentencesOption": {
        "description": "Sets whether the translation engine should first split the input into sentences. For text translations where \n`tag_handling` is not set to `html`, the default value is `1`, meaning the engine splits on punctuation and on newlines.\n\nFor text translations where `tag_handling=html`, the default value is `nonewlines`, meaning the engine splits on punctuation only, ignoring newlines.  \n\nThe use of `nonewlines` as the default value for text translations where `tag_handling=html` is new behavior that was implemented in November 2022, \nwhen HTML handling was moved out of beta. \n\nPossible values are: \n\n * `0` - no splitting at all, whole input is treated as one sentence\n * `1` (default when `tag_handling` is not set to `html`) - splits on punctuation and on newlines\n * `nonewlines` (default when `tag_handling=html`) - splits on punctuation only, ignoring newlines\n\nFor applications that send one sentence per text parameter, we recommend setting `split_sentences` to `0`, in order to prevent the engine from splitting the sentence unintentionally.\n\n\nPlease note that newlines will split sentences when `split_sentences=1`. We recommend cleaning files so they don't contain breaking sentences or setting the parameter `split_sentences` to `nonewlines`.",
        "type": "string",
        "enum": [
          "0",
          "1",
          "nonewlines"
        ],
        "default": "1"
      },
      "SourceLanguage": {
        "type": "string",
        "description": "Language of the text to be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (all Portuguese varieties mixed)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese\n\nIf this parameter is omitted, the API will attempt to detect the language of the text and translate it.",
        "enum": [
          "BG",
          "CS",
          "DA",
          "DE",
          "EL",
          "EN",
          "ES",
          "ET",
          "FI",
          "FR",
          "HU",
          "ID",
          "IT",
          "JA",
          "KO",
          "LT",
          "LV",
          "NB",
          "NL",
          "PL",
          "PT",
          "RO",
          "RU",
          "SK",
          "SL",
          "SV",
          "TR",
          "UK",
          "ZH"
        ],
        "example": "EN"
      },
      "TagHandlingOption": {
        "description": "Sets which kind of tags should be handled. Options currently available:\n * `xml`: Enable XML tag handling; see [XML Handling](https://www.deepl.com/docs-api/xml).\n * `html`: Enable HTML tag handling; see [HTML Handling](https://www.deepl.com/docs-api/html).",
        "type": "string",
        "enum": [
          "xml",
          "html"
        ]
      },
      "NonSplittingTagCommaSeparatedList": {
        "allOf": [
          {
            "description": "Comma-separated list of XML or HTML tags.",
            "type": "string",
            "example": "a,p,span"
          }
        ],
        "description": "Comma-separated list of XML tags which never split sentences.\n\n\nFor some XML files, finding tags with textual content and splitting sentences using those tags won't yield the best results. The following example shows the engine splitting sentences on `par` tags and proceeding to translate the parts separately, resulting in an incorrect translation:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, es sei eine gute Idee gewesen.</par><par> Durchführung einer internen Untersuchung.</par>\n```\n\n\nAs this can lead to bad translations, this type of structure should either be avoided, or the `non_splitting_tags` parameter should be set. The following example shows the same call, with the parameter set to `par`:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, dass sie</par><par> eine interne Untersuchung durchgeführt</par><par> habe</par><par>.</par>\n```\n\n\nThis time, the sentence is translated as a whole. The XML tags are now considered markup and copied into the translated sentence. As the translation of the words \"had been\" has moved to another position in the German sentence, the two par tags are duplicated (which is expected here)."
      },
      "NonSplittingTagList": {
        "allOf": [
          {
            "description": "List of XML or HTML tags.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "a",
              "p",
              "span"
            ]
          }
        ],
        "description": "List of XML tags which never split sentences.\n\n\nFor some XML files, finding tags with textual content and splitting sentences using those tags won't yield the best results. The following example shows the engine splitting sentences on `par` tags and proceeding to translate the parts separately, resulting in an incorrect translation:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, es sei eine gute Idee gewesen.</par><par> Durchführung einer internen Untersuchung.</par>\n```\n\n\nAs this can lead to bad translations, this type of structure should either be avoided, or the `non_splitting_tags` parameter should be set. The following example shows the same call, with the parameter set to `par`:\n * Example request:\n```\n<par>The firm said it had been </par><par> conducting an internal investigation.</par>\n```\n * Example response:\n```\n<par>Die Firma sagte, dass sie</par><par> eine interne Untersuchung durchgeführt</par><par> habe</par><par>.</par>\n```\n\n\nThis time, the sentence is translated as a whole. The XML tags are now considered markup and copied into the translated sentence. As the translation of the words \"had been\" has moved to another position in the German sentence, the two par tags are duplicated (which is expected here)."
      },
      "SplittingTagCommaSeparatedList": {
        "allOf": [
          {
            "description": "Comma-separated list of XML or HTML tags.",
            "type": "string",
            "example": "a,p,span"
          }
        ],
        "description": "Comma-separated list of XML tags which always cause splits.\n\n\nSee the example in the `outline_detection` parameter's description."
      },
      "SplittingTagList": {
        "allOf": [
          {
            "description": "List of XML or HTML tags.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "a",
              "p",
              "span"
            ]
          }
        ],
        "description": "List of XML tags which always cause splits.\n\n\nSee the example in the `outline_detection` parameter's description."
      },
      "IgnoreTagCommaSeparatedList": {
        "allOf": [
          {
            "description": "Comma-separated list of XML or HTML tags.",
            "type": "string",
            "example": "a,p,span"
          }
        ],
        "description": "Comma-separated list of XML tags that indicate text not to be translated.\n\n\nUse this parameter to ensure that elements in the original text are not altered in the translation (e.g., trademarks, product names) and insert tags into your original text. In the following example, the `ignore_tags` parameter is set to `keep`:\n * Example request:\n   ```\n   Please open the page <keep>Settings</keep> to configure your system.\n   ```\n * Example response:\n   ```\n   Bitte öffnen Sie die Seite <keep>Settings</keep> um Ihr System zu konfigurieren.\n   ```"
      },
      "IgnoreTagList": {
        "allOf": [
          {
            "description": "List of XML or HTML tags.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "a",
              "p",
              "span"
            ]
          }
        ],
        "description": "List of XML tags that indicate text not to be translated.\n\n\nUse this parameter to ensure that elements in the original text are not altered in the translation (e.g., trademarks, product names) and insert tags into your original text. In the following example, the `ignore_tags` parameter is set to `keep`:\n * Example request:\n   ```\n   Please open the page <keep>Settings</keep> to configure your system.\n   ```\n * Example response:\n   ```\n   Bitte öffnen Sie die Seite <keep>Settings</keep> um Ihr System zu konfigurieren.\n   ```"
      },
      "TagCommaSeparatedList": {
        "description": "Comma-separated list of XML or HTML tags.",
        "type": "string",
        "example": "a,p,span"
      },
      "TagList": {
        "description": "List of XML or HTML tags.",
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "a",
          "p",
          "span"
        ]
      },
      "TargetLanguage": {
        "type": "string",
        "description": "The language into which the text should be translated. Options currently available:\n * `BG` - Bulgarian\n * `CS` - Czech\n * `DA` - Danish\n * `DE` - German\n * `EL` - Greek\n * `EN` - English (unspecified variant for backward compatibility; please select `EN-GB` or `EN-US` instead)\n * `EN-GB` - English (British)\n * `EN-US` - English (American)\n * `ES` - Spanish\n * `ET` - Estonian\n * `FI` - Finnish\n * `FR` - French\n * `HU` - Hungarian\n * `ID` - Indonesian\n * `IT` - Italian\n * `JA` - Japanese\n * `KO` - Korean\n * `LT` - Lithuanian\n * `LV` - Latvian\n * `NB` - Norwegian (Bokmål)\n * `NL` - Dutch\n * `PL` - Polish\n * `PT` - Portuguese (unspecified variant for backward compatibility; please select `PT-BR` or `PT-PT` instead)\n * `PT-BR` - Portuguese (Brazilian)\n * `PT-PT` - Portuguese (all Portuguese varieties excluding Brazilian Portuguese)\n * `RO` - Romanian\n * `RU` - Russian\n * `SK` - Slovak\n * `SL` - Slovenian\n * `SV` - Swedish\n * `TR` - Turkish\n * `UK` - Ukrainian\n * `ZH` - Chinese (simplified)",
        "enum": [
          "BG",
          "CS",
          "DA",
          "DE",
          "EL",
          "EN-GB",
          "EN-US",
          "ES",
          "ET",
          "FI",
          "FR",
          "HU",
          "ID",
          "IT",
          "JA",
          "KO",
          "LT",
          "LV",
          "NB",
          "NL",
          "PL",
          "PT-BR",
          "PT-PT",
          "RO",
          "RU",
          "SK",
          "SL",
          "SV",
          "TR",
          "UK",
          "ZH"
        ],
        "example": "DE"
      }
    }
  }
}